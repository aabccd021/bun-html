# This file was autogenerated by `bun2nix`, editing it is not recommended.
# Consume it with `callPackage` in your actual derivation -> https://nixos-and-flakes.thiscute.world/nixpkgs/callpackage
{ lib
, fetchurl
, runCommand
, libarchive
, bun
, makeWrapper
, ...
}:
let
  # Set of Bun packages to install
  packages = {
    "@michijs/htmltype" = {
      out_path = "@michijs/htmltype";
      binaries = { };
      pkg = fetchurl {
        name = "@michijs/htmltype@0.2.18";
        url = "https://registry.npmjs.org/@michijs/htmltype/-/htmltype-0.2.18.tgz";
        hash = "sha256-wELrLJU/Jm0NWSg6n5tzn2P/9MiYJ+O09hYGn1XhO0Q=";
      };
    };
    "@michijs/vscode-mathml" = {
      out_path = "@michijs/vscode-mathml";
      binaries = { };
      pkg = fetchurl {
        name = "@michijs/vscode-mathml@1.0.4";
        url = "https://registry.npmjs.org/@michijs/vscode-mathml/-/vscode-mathml-1.0.4.tgz";
        hash = "sha256-MDgYzOr0ATCvNh/7keRU5uXekE4toiMQ1lJ/4W05aUI=";
      };
    };
    "@michijs/vscode-svg" = {
      out_path = "@michijs/vscode-svg";
      binaries = { };
      pkg = fetchurl {
        name = "@michijs/vscode-svg@2.0.8";
        url = "https://registry.npmjs.org/@michijs/vscode-svg/-/vscode-svg-2.0.8.tgz";
        hash = "sha256-0ZShCY+BCGdbcS76DkQxiasnxX9BPpTOqpLcCi+YH0E=";
      };
    };
    "@types/bun" = {
      out_path = "@types/bun";
      binaries = { };
      pkg = fetchurl {
        name = "@types/bun@1.2.10";
        url = "https://registry.npmjs.org/@types/bun/-/bun-1.2.10.tgz";
        hash = "sha256-zUdZMIA/U6t0ClJDEiNxUX3Z2OzKOb3NXUVRiBDPcdg=";
      };
    };
    "@types/node" = {
      out_path = "@types/node";
      binaries = { };
      pkg = fetchurl {
        name = "@types/node@22.14.1";
        url = "https://registry.npmjs.org/@types/node/-/node-22.14.1.tgz";
        hash = "sha256-csONdGF6XWtWf40JLZLnKMZrZ0iKmY2pbS/mK7ogb6Y=";
      };
    };
    "@vscode/web-custom-data" = {
      out_path = "@vscode/web-custom-data";
      binaries = { };
      pkg = fetchurl {
        name = "@vscode/web-custom-data@0.4.12";
        url = "https://registry.npmjs.org/@vscode/web-custom-data/-/web-custom-data-0.4.12.tgz";
        hash = "sha256-Y/1iF03tDL4QQx8mXvybvosr3QaL/NGpcUttaFW+s2s=";
      };
    };
    "bun-types" = {
      out_path = "bun-types";
      binaries = { };
      pkg = fetchurl {
        name = "bun-types@1.2.10";
        url = "https://registry.npmjs.org/bun-types/-/bun-types-1.2.10.tgz";
        hash = "sha256-BgtoB5OeFlpgZR0CyXVZFOeiGps7XnSFngZLlZWonK8=";
      };
    };
    "csstype" = {
      out_path = "csstype";
      binaries = { };
      pkg = fetchurl {
        name = "csstype@3.1.3";
        url = "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz";
        hash = "sha256-Lwg/fPKjmPBaYktO+isUSWxF53zSsSoGR+JpdWcYZ3c=";
      };
    };
    "undici-types" = {
      out_path = "undici-types";
      binaries = { };
      pkg = fetchurl {
        name = "undici-types@6.21.0";
        url = "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz";
        hash = "sha256-z6GppeGJiIUOVI9Pa2KcWNoy3DK+uxFuWOowHlFv0W0=";
      };
    };
  };

  # Build the node modules directory
  nodeModules = runCommand "node-modules"
    {
      nativeBuildInputs = [
        libarchive
        makeWrapper
      ];
    } ''
    mkdir -p $out/node_modules/.bin

    # Extract a given package to it's destination
    extract() {
      local pkg=$1
      local dest=$2
      
      mkdir -p "$dest"
      bsdtar --extract \
        --file "$pkg" \
        --directory "$dest" \
        --strip-components=1 \
        --no-same-owner \
        --no-same-permissions

      chmod -R a+X "$dest"
    }

    # Process each package
    ${lib.concatStringsSep "\n" (lib.mapAttrsToList (name: pkg: ''
      echo "Installing package ${name}..."

      mkdir -p "$out/node_modules/${pkg.out_path}"
      extract "${pkg.pkg}" "$out/node_modules/${pkg.out_path}"
      
      # Handle binaries if they exist
      ${lib.concatStringsSep "\n" (lib.mapAttrsToList (binName: binPath: ''
        ln -sf "${binPath}" "$out/node_modules/.bin/${binName}"
      '') pkg.binaries)}
    '') packages)}

    # Force bun instead of node for script execution
    makeWrapper ${bun}/bin/bun $out/bin/node
    export PATH="$out/bin:$PATH"

    patchShebangs $out/node_modules
  '';

in
{
  inherit nodeModules packages;
}
